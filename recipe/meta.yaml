{% set version = "1.82.0" %}

{% set boost_libs = [
    "atomic", "chrono", "container", "context", "contract", "coroutine",
    "date_time", "filesystem", "graph", "iostreams", "locale", "log", "log_setup",
    "math_c99", "math_c99f", "math_tr1", "math_tr1f", "prg_exec_monitor",
    "program_options", "random", "regex", "serialization", "system", "thread",
    "timer", "type_erasure", "unit_test_framework", "wave", "wserialization"
] %}
{% set boost_libs = boost_libs + ["math_c99l", "math_tr1l"] %}  # [not ppc64le]
{% set boost_libs_static_only = ["exception", "test_exec_monitor"] %}

package:
  name: boost-split
  version: {{ version }}

source:
  url: https://boostorg.jfrog.io/artifactory/main/release/{{ version }}/source/boost_{{ version|replace(".", "_") }}.tar.bz2
  sha256: a6e1ab9b0860e6a2881dd7b21fe9f737a095e5f33a3a874afc6a345228597ee6
  patches:
    - 5eff1ecc8413b0dc93a1ab047d7fed751e6cb40e.patch

build:
  number: 2
requirements:
  build:
    - {{ compiler('cxx') }}
  host:
    - icu               # [unix]
    - xz                # [unix]
    - bzip2
    - zlib
    - zstd

outputs:
  - name: libboost-headers
    script: install-lib.sh   # [unix]
    script: install-lib.bat  # [win]
    requirements:
      host:
        - icu               # [unix]
        - xz                # [unix]
        - bzip2
        - zlib
        - zstd
      run_constrained:
        # make sure we don't co-install with old version of old package name
        - boost-cpp ={{ version }}

    test:
      commands:
        # presence of regular headers
        - test -d $PREFIX/include/boost                   # [unix]
        - if not exist %LIBRARY_INC%\boost exit 1         # [win]

        # absence of python headers
        - test ! -f $PREFIX/include/boost/python.hpp      # [unix]
        - test ! -d $PREFIX/include/boost/python          # [unix]
        - if exist %LIBRARY_INC%\boost\python.hpp exit 1  # [win]
        - if exist %LIBRARY_INC%\boost\python exit 1      # [win]

        # absence of all libraries
        {% for each_boost_lib in boost_libs + boost_libs_static_only %}
        # absence of shared libs
        - test ! -f $PREFIX/lib/libboost_{{ each_boost_lib }}.dylib             # [osx]
        - test ! -f $PREFIX/lib/libboost_{{ each_boost_lib }}.so                # [linux]
        - if exist %LIBRARY_BIN%\boost_{{ each_boost_lib }}.dll exit 1          # [win]
        - if exist %LIBRARY_LIB%\boost_{{ each_boost_lib }}.lib exit 1          # [win]

        # absence of static libs
        - test ! -f $PREFIX/lib/libboost_{{ each_boost_lib }}.a                 # [unix]
        - if exist %LIBRARY_LIB%\libboost_{{ each_boost_lib }}.lib exit 1       # [win]
        {% endfor %}

  - name: libboost
    script: install-lib.sh   # [unix]
    script: install-lib.bat  # [win]
    build:
      run_exports:
        - {{ pin_subpackage('libboost', max_pin='x.x') }}
    requirements:
      build:
        # for strong run-exports
        - {{ compiler('cxx') }}
      host:
        - icu               # [unix]
        - xz                # [unix]
        - bzip2
        - zlib
        - zstd
        - {{ pin_subpackage("libboost-headers", exact=True) }}
      run:
        - {{ pin_subpackage("libboost-headers", exact=True) }}
      run_constrained:
        # Anaconda's output is also called libboost; therefore we automatically
        # avoid issues of co-installability, because a package with the same name
        # can only be installed once. Rather, we need to ensure that conda-forge's
        # old name "boost-cpp" cannot be co-installed wrongly. Since we keep that
        # output as a compatibility wrapper (see below), it's enough to enforce
        # the same version to ensure no old boost packages can be co-installed.
        - boost-cpp ={{ version }}

    test:
      files:
        - test
        - test_lib.sh
        - test_lib.bat
      requires:
        - {{ compiler('cxx') }}    # [build_platform == target_platform]
      commands:
        # presence of regular headers
        - test -d $PREFIX/include/boost                   # [unix]
        - if not exist %LIBRARY_INC%\boost exit 1         # [win]

        # absence of python headers
        - test ! -f $PREFIX/include/boost/python.hpp      # [unix]
        - test ! -d $PREFIX/include/boost/python          # [unix]
        - if exist %LIBRARY_INC%\boost\python.hpp exit 1  # [win]
        - if exist %LIBRARY_INC%\boost\python exit 1      # [win]

        # regular libraries
        {% for each_boost_lib in boost_libs %}
        # presence of shared libs
        - test -f $PREFIX/lib/libboost_{{ each_boost_lib }}.dylib               # [osx]
        - test -f $PREFIX/lib/libboost_{{ each_boost_lib }}.so                  # [linux]
        - if not exist %LIBRARY_BIN%\boost_{{ each_boost_lib }}.dll exit 1      # [win]
        - if not exist %LIBRARY_LIB%\boost_{{ each_boost_lib }}.lib exit 1      # [win]

        # absence of static libs
        - test ! -f $PREFIX/lib/libboost_{{ each_boost_lib }}.a                 # [unix]
        - if exist %LIBRARY_LIB%\libboost_{{ each_boost_lib }}.lib exit 1       # [win]
        {% endfor %}

        # static-only libraries
        {% for each_boost_lib in boost_libs_static_only %}
        # presence of static libs
        - test -f $PREFIX/lib/libboost_{{ each_boost_lib }}.a                   # [unix]
        - if not exist %LIBRARY_LIB%\libboost_{{ each_boost_lib }}.lib exit 1   # [win]

        # absence of shared libs
        - test ! -f $PREFIX/lib/libboost_{{ each_boost_lib }}.dylib             # [osx]
        - test ! -f $PREFIX/lib/libboost_{{ each_boost_lib }}.so                # [linux]
        - if exist %LIBRARY_BIN%\boost_{{ each_boost_lib }}.dll exit 1          # [win]
        - if exist %LIBRARY_LIB%\boost_{{ each_boost_lib }}.lib exit 1          # [win]
        {% endfor %}

        # test compilation
        - ./test_lib.sh   # [unix]
        - ./test_lib.bat  # [win]

  # compatibility output for old naming convention
  - name: boost-cpp
    requirements:
      host:
        # match host deps to avoid hash collisions between wrappers
        - icu               # [unix]
        - xz                # [unix]
        - bzip2
        - zlib
        - zstd
        - {{ pin_subpackage("libboost", exact=True) }}
      run:
        - {{ pin_subpackage("libboost", exact=True) }}
    test:
      commands:
        - echo "tested in other outputs"

  - name: libboost-python
    script: build-py.sh   # [unix]
    script: build-py.bat  # [win]
    requirements:
      build:
        - python                                 # [build_platform != target_platform]
        - cross-python_{{ target_platform }}     # [build_platform != target_platform]
        - numpy                                  # [build_platform != target_platform]
        - {{ compiler('cxx') }}
      host:
        - python
        - numpy
        - {{ pin_subpackage("libboost", exact=True) }}
      run:
        - python
        - {{ pin_compatible('numpy') }}
        - {{ pin_subpackage("libboost", exact=True) }}
      run_constrained:
        # make sure we don't co-install with old version of old package name
        - boost ={{ version }}
        # avoid co-installation with Anaconda's naming of this output
        - py-boost <0.0a0

    test:
      commands:
        # Verify Python headers are installed.
        - test -f $PREFIX/include/boost/python.hpp                 # [unix]
        - test -d $PREFIX/include/boost/python                     # [unix]
        - if not exist %LIBRARY_INC%\\boost\\python.hpp exit 1     # [win]
        - if not exist %LIBRARY_INC%\\boost\\python exit 1         # [win]

        # Verify libraries.
        {% set boost_py_libs = [
                "python%s" % py,
                "numpy%s" % py
        ] %}
        {% for each_boost_lib in boost_py_libs %}
        - test -f $PREFIX/lib/libboost_{{ each_boost_lib }}.a                                                 # [unix]
        - test -f $PREFIX/lib/libboost_{{ each_boost_lib }}${SHLIB_EXT}                                       # [unix]
        - if not exist %PREFIX%\\Library\\bin\\boost_{{ each_boost_lib }}.dll exit 1                          # [win]
        - if not exist %PREFIX%\\Library\\lib\\boost_{{ each_boost_lib }}.lib exit 1                          # [win]
        - if not exist %PREFIX%\\Library\\lib\\libboost_{{ each_boost_lib }}.lib exit 1                       # [win]
        {% endfor %}

  # compatibility output for old naming convention
  - name: boost
    requirements:
      host:
        # match host deps to avoid hash collisions between wrappers
        - python
        - numpy
        - {{ pin_subpackage("libboost-python", exact=True) }}
      run:
        - {{ pin_subpackage("libboost-python", exact=True) }}
    test:
      commands:
        - echo "tested in other outputs"

about:
  home: http://www.boost.org/
  license: BSL-1.0
  license_file: LICENSE_1_0.txt
  summary: Free peer-reviewed portable C++ source libraries.
  dev_url: https://github.com/boostorg/boost
  doc_url: https://www.boost.org/doc/

extra:
  recipe-maintainers:
    - ccordoba12
    - jakirkham
    - msarahan
    - ocefpaf
    - jschueller
    - scopatz
    - isuruf
    - xhochy
    - beckermr
    - matthiasdiener
  feedstock-name: boost
